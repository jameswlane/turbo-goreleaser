name: Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  release:
    name: Release GitHub Action
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup mise
        uses: jdx/mise-action@v2
        with:
          install: true
          cache: true

      - name: Install dependencies
        run: pnpm install

      - name: Run tests
        run: pnpm test:run

      - name: Build and Package
        run: |
          pnpm run build
          pnpm run package

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v4
        id: semantic
        with:
          semantic_version: 24
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # After a successful release, update the major version tag with dist files
      - name: Update Major Version Tag
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          # Extract major version from the new version (e.g., 1.3.5 -> v1, 2.0.0 -> v2)
          VERSION="${{ steps.semantic.outputs.new_release_version }}"
          MAJOR_VERSION="v${VERSION%%.*}"

          echo "üè∑Ô∏è Processing version ${VERSION} -> ${MAJOR_VERSION}"

          # Configure git with proper authentication
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Create or checkout the release branch for the major version
          echo "üìù Creating release branch: release/${MAJOR_VERSION}"
          git checkout -B "release/${MAJOR_VERSION}"

          # Ensure dist files are built and up to date
          echo "üîß Ensuring dist files are current"
          npm run package

          # Add dist files to the release branch (temporarily modify gitignore)
          echo "üì¶ Adding dist files to release branch"
          cp .gitignore .gitignore.backup
          sed -i '/^dist\//d' .gitignore
          sed -i '/\*\/dist\//d' .gitignore

          git add dist/
          git add .gitignore

          # Commit dist files if there are changes
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è No changes to dist files"
          else
            git commit -m "build: add dist files for ${MAJOR_VERSION}"
            echo "‚úÖ Committed dist files for ${MAJOR_VERSION}"
          fi

          # Restore original gitignore
          mv .gitignore.backup .gitignore
          git add .gitignore
          git commit -m "build: restore gitignore after dist addition" || echo "No gitignore changes"

          # Force update the major version tag to this commit (with dist files)
          echo "üè∑Ô∏è Updating tag ${MAJOR_VERSION} to point to release branch"
          git tag -f "${MAJOR_VERSION}"

          # Push the release branch and tag
          echo "üöÄ Pushing release branch and tag"
          git push origin "release/${MAJOR_VERSION}" --force
          git push origin "${MAJOR_VERSION}" --force

          echo "‚úÖ Successfully updated ${MAJOR_VERSION} tag with dist files"